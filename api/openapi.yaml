openapi: 3.0.3
info:
  contact:
    email: mikita.zdanovich@godeltech.com
  description: SDET MASTERY SANDBOX
  title: Godel Petstore
  version: 1.0.3
servers:
  - url: http://localhost:3000
  - url: https://petstore.godel
paths:
  /pet:
    get:
      description: Retrieve list Pets
      operationId: getPets
      parameters:
        - description: Status values that need to be considered for filter
          in: query
          name: status
          required: false
          schema:
            items:
              default: available
              enum:
                - available
                - pending
                - sold
              type: string
            type: array
          style: form
        - description: ID of pet to return
          in: header
          name: id
          required: false
          schema:
            format: int64
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Pet'
                type: array
          description: Operation Succeed
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Operation failed'
      summary: Get All Pets
      tags:
        - pet
      x-eov-operation-handler: controllers/PetController
      x-eov-operation-id: getPets
    post:
      operationId: addPet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
        description: Pet object that needs to be added to the store
        required: true
      responses:
        "200":
          content: { }
          description: Pet Created Successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: Invalid input
      summary: Add a new pet to the store
      tags:
        - pet
      x-codegen-request-body-name: body
      x-eov-operation-handler: controllers/PetController
    delete:
      operationId: deletePet
      parameters:
        - explode: false
          in: header
          name: api_key
          required: true
          schema:
            type: string
          style: simple
        - description: Pet id to delete
          explode: true
          in: header
          name: id
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "204":
          content: { }
          description: Pet destroyed
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Operation failed'
      summary: Deletes a pet
      tags:
        - pet
      x-eov-operation-handler: controllers/PetController
    put:
      operationId: updatePet
      description: Update an existing pet
      parameters:
        - description: ID of pet to return
          in: header
          name: id
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        description: Pet object that needs to be added to the store
        required: true
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid ID supplied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: Pet not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: Validation exception
      summary: Update an existing pet
      tags:
        - pet
      x-codegen-request-body-name: body
      x-eov-operation-handler: controllers/PetController
  /pet/uploadImage:
    post:
      operationId: uploadFile
      parameters:
        - description: ID of pet to update
          explode: false
          in: header
          name: id
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  description: file to upload
                  format: binary
                filename:
                  type: string
                  description: name of image
            encoding:
              file:
                contentType: image/png, image/jpeg
      responses:
        "200":
          content:
            { }
          description: successful operation
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Operation failed'
      security:
        - bearerAuth: [ ]
      summary: uploads an image
      tags:
        - pet

      x-eov-operation-handler: controllers/PetController
      x-eov-operation-id: uploadPetImage

  /store/order:
    post:
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: order placed for purchasing the pet
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
          description: successful operation
        "400":
          content: { }
          description: Invalid Order
      summary: Place an order for a pet
      tags:
        - store
      x-codegen-request-body-name: body
      x-eov-operation-handler: controllers/StoreController
  /store/order/{orderId}:
    delete:
      description: For valid response try integer IDs with positive integer value.
        Negative or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
        - description: ID of the order that needs to be deleted
          explode: false
          in: path
          name: orderId
          required: true
          schema:
            format: int64
            minimum: 1
            type: integer
          style: simple
      responses:
        "400":
          content: { }
          description: Invalid ID supplied
        "404":
          content: { }
          description: Order not found
      summary: Delete purchase order by ID
      tags:
        - store
      x-eov-operation-handler: controllers/StoreController
    get:
      description: For valid response try integer IDs with value >= 1 and <= 10. Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
        - description: ID of pet that needs to be fetched
          explode: false
          in: path
          name: orderId
          required: true
          schema:
            format: int64
            maximum: 10
            minimum: 1
            type: integer
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
          description: successful operation
        "400":
          content: { }
          description: Invalid ID supplied
        "404":
          content: { }
          description: Order not found
      summary: Find purchase order by ID
      tags:
        - store
      x-eov-operation-handler: controllers/StoreController
  /store/inventory:
    get:
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  format: int32
                  type: integer
                type: object
          description: successful operation
      summary: Returns pet inventories by status
      tags:
        - store
      x-eov-operation-handler: controllers/StoreController
  /login:
    post:
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/xml:
            schema:
              $ref: '#/components/schemas/Login'
        description: Pet object that needs to be added to the store
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
            application/xml:
              schema:
                $ref: '#/components/schemas/Token'
          description: successful operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid username/password supplied
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth header required
      summary: Logs user into the system
      security: [ ]
      tags:
        - login flow
      x-eov-operation-handler: controllers/AuthController
  /logout:
    get:
      operationId: logoutUser
      responses:
        default:
          content: { }
          description: successful operation
      summary: Logs out current logged in user session
      tags:
        - login flow
      x-eov-operation-handler: controllers/UserController
  /user:
    post:
      description: This can only be done by the logged in user.
      operationId: createUser
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true

      responses:
        "200":
          content: { }
          description: successful operation
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Failed to create user
      summary: Create user
      tags:
        - user
      x-codegen-request-body-name: body
      x-eov-operation-handler: controllers/UserController
    delete:
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - description: The name that needs to be deleted
          explode: false
          in: header
          name: username
          required: true
          schema:
            type: string
          style: simple
      responses:
        "400":
          content: { }
          description: Invalid username supplied
        "404":
          content: { }
          description: User not found
      summary: Delete user
      tags:
        - user
      x-eov-operation-handler: controllers/UserController
    get:
      operationId: getUserByName
      parameters:
        - description: 'The name that needs to be fetched. Use user1 for testing. '
          explode: false
          in: header
          name: username
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
        "400":
          content: { }
          description: Invalid username supplied
        "404":
          content: { }
          description: User not found
      summary: Get user by user name
      tags:
        - user
      x-eov-operation-handler: controllers/UserController
    put:
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - description: name that need to be updated
          explode: false
          in: header
          name: username
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
      responses:
        "400":
          content: { }
          description: Invalid user supplied
        "404":
          content: { }
          description: User not found
      summary: Updated user
      tags:
        - user
      x-codegen-request-body-name: body
      x-eov-operation-handler: controllers/UserController
components:
  schemas:
    Login:
      example:
        username: Username
        password: Password
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
    Token:
      example:
        accssToken: jtwToken
        refreshToken: jwtRefreshToken
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
    Error:
      example:
        code: 400
        message: 'Bad request'
        errors: 'Bad request'
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        errors:
          description: Errors object
    Category:
      example:
        name: name
        id: 6
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
      type: object
      xml:
        name: Category
    Pet:
      example:
        photoUrls:
          - photoUrls
          - photoUrls
        name: doggie
        category:
          name: name
          id: 6
        tags:
          - name: name
            id: 1
          - name: name
            id: 1
        status: available
      properties:
        category:
          $ref: '#/components/schemas/Category'
        name:
          example: doggie
          type: string
        photoUrls:
          items:
            type: string
            xml:
              name: photoUrl
          type: array
          xml:
            wrapped: true
        tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
          xml:
            wrapped: true
        status:
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
          type: string
      required:
        - name
        - photoUrls
      type: object
      xml:
        name: Pet
    Tag:
      example:
        name: name
        id: 1
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
      type: object
      xml:
        name: Tag
    Order:
      example:
        petId: 6
        quantity: 1
        id: 0
        shipDate: 2000-01-23T04:56:07.000+00:00
        complete: true
        status: placed
      properties:
        id:
          format: int64
          type: integer
        petId:
          format: int64
          type: integer
        quantity:
          format: int32
          type: integer
        shipDate:
          format: date-time
          type: string
        status:
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
          type: string
        complete:
          type: boolean
      type: object
      xml:
        name: Order
    User:
      example:
        firstname: firstName
        lastname: lastName
        password: password
        phone: phone
        email: email
        username: username
      properties:
        username:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
      required: [ username, firstname, lastname, password ]
      type: object
      xml:
        name: User
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

#security:
#  - bearerAuth: [ ]